
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005b  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002a9  00000000  00000000  00000211  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000016f  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002a3  00000000  00000000  00000629  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000dc  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f8  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	4e c0       	rjmp	.+156    	; 0xa0 <__vector_1>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	41 d0       	rcall	.+130    	; 0xc4 <main>
  42:	7d c0       	rjmp	.+250    	; 0x13e <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <PortInit>:
#define D1_OFF		PORTC&=~0x04


void PortInit(void)
{
    DDRB = 0B00000000;
  46:	14 b8       	out	0x04, r1	; 4
    PORTB= 0B00000000;
  48:	15 b8       	out	0x05, r1	; 5
    PINB = 0x00;
  4a:	13 b8       	out	0x03, r1	; 3

    DDRD = 0B00000000;
  4c:	1a b8       	out	0x0a, r1	; 10
    PORTD= 0B00000000;
  4e:	1b b8       	out	0x0b, r1	; 11
    PIND = 0x00;
  50:	19 b8       	out	0x09, r1	; 9

    DDRC = 0B00111100;
  52:	8c e3       	ldi	r24, 0x3C	; 60
  54:	87 b9       	out	0x07, r24	; 7
    PORTC= 0B00000000;
  56:	18 b8       	out	0x08, r1	; 8
    PINC = 0x00;
  58:	16 b8       	out	0x06, r1	; 6
}
  5a:	08 95       	ret

0000005c <UartInit>:

void UartInit(void)
{
    UBRR0H = (F_CPU / BAUD / 16 - 1) / 256;
  5c:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (F_CPU / BAUD / 16 - 1) % 256;
  60:	83 e0       	ldi	r24, 0x03	; 3
  62:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
  66:	88 e9       	ldi	r24, 0x98	; 152
  68:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
  6c:	86 e0       	ldi	r24, 0x06	; 6
  6e:	80 93 c2 00 	sts	0x00C2, r24
}
  72:	08 95       	ret

00000074 <SendStr>:

void SendStr(unsigned char* data,unsigned char len)
{
  74:	58 2f       	mov	r21, r24
  76:	28 2f       	mov	r18, r24
  78:	39 2f       	mov	r19, r25
  7a:	f9 01       	movw	r30, r18
  7c:	07 c0       	rjmp	.+14     	; 0x8c <SendStr+0x18>
    unsigned char i;
    for(i=0; i<len; i++)
    {
        while(!(UCSR0A & (1 << UDRE0)));
  7e:	80 91 c0 00 	lds	r24, 0x00C0
  82:	85 ff       	sbrs	r24, 5
  84:	fc cf       	rjmp	.-8      	; 0x7e <SendStr+0xa>
        UDR0 = *(data++);
  86:	81 91       	ld	r24, Z+
  88:	80 93 c6 00 	sts	0x00C6, r24
}

void SendStr(unsigned char* data,unsigned char len)
{
    unsigned char i;
    for(i=0; i<len; i++)
  8c:	8e 2f       	mov	r24, r30
  8e:	85 1b       	sub	r24, r21
  90:	86 17       	cp	r24, r22
  92:	a8 f3       	brcs	.-22     	; 0x7e <SendStr+0xa>
    {
        while(!(UCSR0A & (1 << UDRE0)));
        UDR0 = *(data++);
    }
}
  94:	08 95       	ret

00000096 <I0Init>:


void I0Init(void)
{
    EICRA = 1<<ISC01;		//
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	80 93 69 00 	sts	0x0069, r24
	EIMSK |= 1<<INT0;
  9c:	e8 9a       	sbi	0x1d, 0	; 29
}
  9e:	08 95       	ret

000000a0 <__vector_1>:


ISR(INT0_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
	D1_BLINK;
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	94 e0       	ldi	r25, 0x04	; 4
  b2:	89 27       	eor	r24, r25
  b4:	88 b9       	out	0x08, r24	; 8
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <main>:
*/

int main(void)
{
	
	cli();
  c4:	f8 94       	cli
    PortInit();
  c6:	bf df       	rcall	.-130    	; 0x46 <PortInit>
}


void I0Init(void)
{
    EICRA = 1<<ISC01;		//
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	80 93 69 00 	sts	0x0069, r24
	EIMSK |= 1<<INT0;
  ce:	e8 9a       	sbi	0x1d, 0	; 29
{
	
	cli();
    PortInit();
    I0Init();
	sei();
  d0:	78 94       	sei
	D1_BLINK;
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	94 e0       	ldi	r25, 0x04	; 4
  d6:	89 27       	eor	r24, r25
  d8:	88 b9       	out	0x08, r24	; 8
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  de:	28 eb       	ldi	r18, 0xB8	; 184
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d9 f7       	brne	.-10     	; 0xe2 <main+0x1e>
	_delay_ms(500);
	D1_BLINK;
  ec:	88 b1       	in	r24, 0x08	; 8
  ee:	94 e0       	ldi	r25, 0x04	; 4
  f0:	89 27       	eor	r24, r25
  f2:	88 b9       	out	0x08, r24	; 8
  f4:	88 e8       	ldi	r24, 0x88	; 136
  f6:	93 e1       	ldi	r25, 0x13	; 19
  f8:	28 eb       	ldi	r18, 0xB8	; 184
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 102:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 104:	d9 f7       	brne	.-10     	; 0xfc <main+0x38>
	_delay_ms(500);
	D1_BLINK;
 106:	88 b1       	in	r24, 0x08	; 8
 108:	94 e0       	ldi	r25, 0x04	; 4
 10a:	89 27       	eor	r24, r25
 10c:	88 b9       	out	0x08, r24	; 8
 10e:	88 e8       	ldi	r24, 0x88	; 136
 110:	93 e1       	ldi	r25, 0x13	; 19
 112:	28 eb       	ldi	r18, 0xB8	; 184
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	f9 01       	movw	r30, r18
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11e:	d9 f7       	brne	.-10     	; 0x116 <main+0x52>
	_delay_ms(500);
	D1_BLINK;
 120:	88 b1       	in	r24, 0x08	; 8
 122:	94 e0       	ldi	r25, 0x04	; 4
 124:	89 27       	eor	r24, r25
 126:	88 b9       	out	0x08, r24	; 8
 128:	88 e8       	ldi	r24, 0x88	; 136
 12a:	93 e1       	ldi	r25, 0x13	; 19
 12c:	28 eb       	ldi	r18, 0xB8	; 184
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	f9 01       	movw	r30, r18
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 136:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 138:	d9 f7       	brne	.-10     	; 0x130 <main+0x6c>
	_delay_ms(500);
	D1_OFF;
 13a:	42 98       	cbi	0x08, 2	; 8
 13c:	ff cf       	rjmp	.-2      	; 0x13c <main+0x78>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
