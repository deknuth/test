
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003fa  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000db  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000854  00000000  00000000  0000058d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002c1  00000000  00000000  00000de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007e5  00000000  00000000  000010a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017e  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000035d  00000000  00000000  00001af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001f8  00000000  00000000  00001e53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea ef       	ldi	r30, 0xFA	; 250
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a4 30       	cpi	r26, 0x04	; 4
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>
  56:	94 d1       	rcall	.+808    	; 0x380 <main>
  58:	ce c1       	rjmp	.+924    	; 0x3f6 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <TWIInt>:
#define Twi() 		(TWCR=(1<<TWINT)|(1<<TWEN)) // 启动I2C
#define Write8Bit(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 		// 写数据到TWDR

void TWIInt(void)
{
    TWCR = 0x00;
  5c:	10 92 bc 00 	sts	0x00BC, r1
    TWBR = TWBR_SET;	// set speed
  60:	8c e0       	ldi	r24, 0x0C	; 12
  62:	80 93 b8 00 	sts	0x00B8, r24
    TWSR = 0x00;
  66:	10 92 b9 00 	sts	0x00B9, r1
}
  6a:	08 95       	ret

0000006c <I2C_Write>:
I2C总线写一个字节
返回0:写成功
返回1:写失败
**********************************************/
unsigned char I2C_Write(unsigned char Wdata,unsigned char RegAddress)
{
  6c:	98 2f       	mov	r25, r24
   Start();
  6e:	84 ea       	ldi	r24, 0xA4	; 164
  70:	80 93 bc 00 	sts	0x00BC, r24
   Wait();
  74:	80 91 bc 00 	lds	r24, 0x00BC
  78:	87 ff       	sbrs	r24, 7
  7a:	fc cf       	rjmp	.-8      	; 0x74 <I2C_Write+0x8>
   if(TestAck()!=START)
  7c:	80 91 b9 00 	lds	r24, 0x00B9
  80:	88 7f       	andi	r24, 0xF8	; 248
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	a1 f5       	brne	.+104    	; 0xee <I2C_Write+0x82>
   return 1;     
  
   Write8Bit(WD_DEVICE_ADDR); //写I2C从器件地址和写方式
  86:	80 e9       	ldi	r24, 0x90	; 144
  88:	80 93 bb 00 	sts	0x00BB, r24
  8c:	84 e8       	ldi	r24, 0x84	; 132
  8e:	80 93 bc 00 	sts	0x00BC, r24
   Wait();
  92:	80 91 bc 00 	lds	r24, 0x00BC
  96:	87 ff       	sbrs	r24, 7
  98:	fc cf       	rjmp	.-8      	; 0x92 <I2C_Write+0x26>
   if(TestAck()!=MT_SLA_ACK)
  9a:	80 91 b9 00 	lds	r24, 0x00B9
  9e:	88 7f       	andi	r24, 0xF8	; 248
  a0:	88 31       	cpi	r24, 0x18	; 24
  a2:	29 f5       	brne	.+74     	; 0xee <I2C_Write+0x82>
   return 1;     
  
   Write8Bit(RegAddress);   //写器件相应寄存器地址
  a4:	60 93 bb 00 	sts	0x00BB, r22
  a8:	84 e8       	ldi	r24, 0x84	; 132
  aa:	80 93 bc 00 	sts	0x00BC, r24
   Wait();
  ae:	80 91 bc 00 	lds	r24, 0x00BC
  b2:	87 ff       	sbrs	r24, 7
  b4:	fc cf       	rjmp	.-8      	; 0xae <I2C_Write+0x42>
   if(TestAck()!=MT_DATA_ACK)
  b6:	80 91 b9 00 	lds	r24, 0x00B9
  ba:	88 7f       	andi	r24, 0xF8	; 248
  bc:	88 32       	cpi	r24, 0x28	; 40
  be:	b9 f4       	brne	.+46     	; 0xee <I2C_Write+0x82>
   return 1;        
  
   Write8Bit(Wdata);    // 写数据到器件相应寄存器
  c0:	90 93 bb 00 	sts	0x00BB, r25
  c4:	84 e8       	ldi	r24, 0x84	; 132
  c6:	80 93 bc 00 	sts	0x00BC, r24
   Wait();
  ca:	80 91 bc 00 	lds	r24, 0x00BC
  ce:	87 ff       	sbrs	r24, 7
  d0:	fc cf       	rjmp	.-8      	; 0xca <I2C_Write+0x5e>
   if(TestAck() != MT_DATA_ACK)
  d2:	80 91 b9 00 	lds	r24, 0x00B9
  d6:	88 7f       	andi	r24, 0xF8	; 248
  d8:	88 32       	cpi	r24, 0x28	; 40
  da:	49 f4       	brne	.+18     	; 0xee <I2C_Write+0x82>
   return 1;      
  
   Stop();        //I2C停止
  dc:	84 e9       	ldi	r24, 0x94	; 148
  de:	80 93 bc 00 	sts	0x00BC, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e2:	80 e2       	ldi	r24, 0x20	; 32
  e4:	9e e4       	ldi	r25, 0x4E	; 78
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <I2C_Write+0x7a>
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret
   _delay_ms(10);     //延时
   return 0;
  ee:	81 e0       	ldi	r24, 0x01	; 1
} 
  f0:	08 95       	ret

000000f2 <I2C_Read>:

unsigned int I2C_Read(unsigned RegAddress)
{
  f2:	98 2f       	mov	r25, r24
	unsigned int temp;
	Start();
  f4:	84 ea       	ldi	r24, 0xA4	; 164
  f6:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
  fa:	80 91 bc 00 	lds	r24, 0x00BC
  fe:	87 ff       	sbrs	r24, 7
 100:	fc cf       	rjmp	.-8      	; 0xfa <I2C_Read+0x8>
	if(TestAck()!=START) 
 102:	80 91 b9 00 	lds	r24, 0x00B9
 106:	88 7f       	andi	r24, 0xF8	; 248
 108:	88 30       	cpi	r24, 0x08	; 8
 10a:	09 f0       	breq	.+2      	; 0x10e <I2C_Read+0x1c>
 10c:	62 c0       	rjmp	.+196    	; 0x1d2 <I2C_Read+0xe0>
		return 1;
	Write8Bit(WD_DEVICE_ADDR); 	// 写I2C从器件地址和写方式
 10e:	80 e9       	ldi	r24, 0x90	; 144
 110:	80 93 bb 00 	sts	0x00BB, r24
 114:	84 e8       	ldi	r24, 0x84	; 132
 116:	80 93 bc 00 	sts	0x00BC, r24
	Wait(); 
 11a:	80 91 bc 00 	lds	r24, 0x00BC
 11e:	87 ff       	sbrs	r24, 7
 120:	fc cf       	rjmp	.-8      	; 0x11a <I2C_Read+0x28>
	if(TestAck()!=MT_SLA_ACK)
 122:	80 91 b9 00 	lds	r24, 0x00B9
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	88 31       	cpi	r24, 0x18	; 24
 12a:	09 f0       	breq	.+2      	; 0x12e <I2C_Read+0x3c>
 12c:	52 c0       	rjmp	.+164    	; 0x1d2 <I2C_Read+0xe0>
		return 1;
	
	Write8Bit(RegAddress); 	// 写器件相应寄存器地址
 12e:	90 93 bb 00 	sts	0x00BB, r25
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 138:	80 91 bc 00 	lds	r24, 0x00BC
 13c:	87 ff       	sbrs	r24, 7
 13e:	fc cf       	rjmp	.-8      	; 0x138 <I2C_Read+0x46>
	if (TestAck()!=MT_DATA_ACK) 
 140:	80 91 b9 00 	lds	r24, 0x00B9
 144:	88 7f       	andi	r24, 0xF8	; 248
 146:	88 32       	cpi	r24, 0x28	; 40
 148:	09 f0       	breq	.+2      	; 0x14c <I2C_Read+0x5a>
 14a:	43 c0       	rjmp	.+134    	; 0x1d2 <I2C_Read+0xe0>
		return 1;

	Start(); 		// I2C重新启动
 14c:	84 ea       	ldi	r24, 0xA4	; 164
 14e:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 152:	80 91 bc 00 	lds	r24, 0x00BC
 156:	87 ff       	sbrs	r24, 7
 158:	fc cf       	rjmp	.-8      	; 0x152 <I2C_Read+0x60>
	if(TestAck()!=RE_START) 
 15a:	80 91 b9 00 	lds	r24, 0x00B9
 15e:	88 7f       	andi	r24, 0xF8	; 248
 160:	80 31       	cpi	r24, 0x10	; 16
 162:	b9 f5       	brne	.+110    	; 0x1d2 <I2C_Read+0xe0>
		return 1;
	Write8Bit(RD_DEVICE_ADDR); // 写I2C从器件地址和读方式
 164:	81 e9       	ldi	r24, 0x91	; 145
 166:	80 93 bb 00 	sts	0x00BB, r24
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 170:	80 91 bc 00 	lds	r24, 0x00BC
 174:	87 ff       	sbrs	r24, 7
 176:	fc cf       	rjmp	.-8      	; 0x170 <I2C_Read+0x7e>
	if(TestAck()!=MR_SLA_ACK) 
 178:	80 91 b9 00 	lds	r24, 0x00B9
 17c:	88 7f       	andi	r24, 0xF8	; 248
 17e:	80 34       	cpi	r24, 0x40	; 64
 180:	41 f5       	brne	.+80     	; 0x1d2 <I2C_Read+0xe0>
		return 1;

	Twi(); 			// 启动主I2C读方式
 182:	84 e8       	ldi	r24, 0x84	; 132
 184:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 188:	80 91 bc 00 	lds	r24, 0x00BC
 18c:	87 ff       	sbrs	r24, 7
 18e:	fc cf       	rjmp	.-8      	; 0x188 <I2C_Read+0x96>
	if(TestAck() != MR_DATA_NOACK) 
 190:	80 91 b9 00 	lds	r24, 0x00B9
 194:	88 7f       	andi	r24, 0xF8	; 248
 196:	88 35       	cpi	r24, 0x58	; 88
 198:	e1 f4       	brne	.+56     	; 0x1d2 <I2C_Read+0xe0>
		return 1; 
	temp = TWDR;		// 读取I2C接收数据
 19a:	90 91 bb 00 	lds	r25, 0x00BB
	temp <<= 8;
	
	Twi();
 19e:	84 e8       	ldi	r24, 0x84	; 132
 1a0:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 1a4:	80 91 bc 00 	lds	r24, 0x00BC
 1a8:	87 ff       	sbrs	r24, 7
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <I2C_Read+0xb2>
	if(TestAck() != MR_DATA_NOACK) 
 1ac:	80 91 b9 00 	lds	r24, 0x00B9
 1b0:	88 7f       	andi	r24, 0xF8	; 248
 1b2:	88 35       	cpi	r24, 0x58	; 88
 1b4:	71 f4       	brne	.+28     	; 0x1d2 <I2C_Read+0xe0>
		return 1;
			SDA_116_OUT;
 1b6:	3c 9a       	sbi	0x07, 4	; 7
	SDA_116_L;
 1b8:	44 98       	cbi	0x08, 4	; 8
	temp |= TWDR;
 1ba:	80 91 bb 00 	lds	r24, 0x00BB
	Twi(); 			// 启动主I2C读方式
	Wait();
	if(TestAck() != MR_DATA_NOACK) 
		return 1; 
	temp = TWDR;		// 读取I2C接收数据
	temp <<= 8;
 1be:	39 2f       	mov	r19, r25
 1c0:	20 e0       	ldi	r18, 0x00	; 0
	Wait();
	if(TestAck() != MR_DATA_NOACK) 
		return 1;
			SDA_116_OUT;
	SDA_116_L;
	temp |= TWDR;
 1c2:	48 2f       	mov	r20, r24
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	42 2b       	or	r20, r18
 1c8:	53 2b       	or	r21, r19
	Stop();
 1ca:	84 e9       	ldi	r24, 0x94	; 148
 1cc:	80 93 bc 00 	sts	0x00BC, r24
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <I2C_Read+0xe4>
	return temp;
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	50 e0       	ldi	r21, 0x00	; 0
}
 1d6:	ca 01       	movw	r24, r20
 1d8:	08 95       	ret

000001da <PortInit>:
	#define TWBR_SET    (F_CPU/fSCL-16)/2 
#endif

void PortInit(void)
{
    DDRB = 0B00000000;
 1da:	14 b8       	out	0x04, r1	; 4
    PORTB= 0B00000000;
 1dc:	15 b8       	out	0x05, r1	; 5
    PINB = 0x00;
 1de:	13 b8       	out	0x03, r1	; 3

    DDRD = 0B01111100;		// PD5->RES	PD6->D/C PD7->BUSY PD4->SDI PD3->CS PD2->CLK
 1e0:	8c e7       	ldi	r24, 0x7C	; 124
 1e2:	8a b9       	out	0x0a, r24	; 10
    PORTD= 0B00000000;
 1e4:	1b b8       	out	0x0b, r1	; 11
    PIND = 0x00;
 1e6:	19 b8       	out	0x09, r1	; 9

    DDRC = 0B00111111;
 1e8:	8f e3       	ldi	r24, 0x3F	; 63
 1ea:	87 b9       	out	0x07, r24	; 7
    PORTC= 0B00000000;
 1ec:	18 b8       	out	0x08, r1	; 8
    PINC = 0x00;
 1ee:	16 b8       	out	0x06, r1	; 6
}
 1f0:	08 95       	ret

000001f2 <TWI_WriteByte>:

void TWI_WriteByte(unsigned char src)
{
    unsigned char i;
    SDA_116_OUT;
 1f2:	3c 9a       	sbi	0x07, 4	; 7
 1f4:	20 e0       	ldi	r18, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1f6:	45 e0       	ldi	r20, 0x05	; 5
    for (i = 0; i < 8; i++)
    {
        if (src & 0x80)
 1f8:	32 e0       	ldi	r19, 0x02	; 2
 1fa:	87 ff       	sbrs	r24, 7
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <TWI_WriteByte+0x10>
            SDA_116_H;
 1fe:	44 9a       	sbi	0x08, 4	; 8
 200:	01 c0       	rjmp	.+2      	; 0x204 <TWI_WriteByte+0x12>
        else
            SDA_116_L;
 202:	44 98       	cbi	0x08, 4	; 8
        SCL_116_H;
 204:	45 9a       	sbi	0x08, 5	; 8
 206:	94 2f       	mov	r25, r20
 208:	9a 95       	dec	r25
 20a:	f1 f7       	brne	.-4      	; 0x208 <TWI_WriteByte+0x16>
        _delay_us(2);
        SCL_116_L;
 20c:	45 98       	cbi	0x08, 5	; 8
 20e:	93 2f       	mov	r25, r19
 210:	9a 95       	dec	r25
 212:	f1 f7       	brne	.-4      	; 0x210 <TWI_WriteByte+0x1e>

void TWI_WriteByte(unsigned char src)
{
    unsigned char i;
    SDA_116_OUT;
    for (i = 0; i < 8; i++)
 214:	2f 5f       	subi	r18, 0xFF	; 255
 216:	28 30       	cpi	r18, 0x08	; 8
 218:	11 f0       	breq	.+4      	; 0x21e <TWI_WriteByte+0x2c>
            SDA_116_L;
        SCL_116_H;
        _delay_us(2);
        SCL_116_L;
		_delay_us(1);
        src <<= 1;
 21a:	88 0f       	add	r24, r24
 21c:	ee cf       	rjmp	.-36     	; 0x1fa <TWI_WriteByte+0x8>
 21e:	08 95       	ret

00000220 <TWI_WriteWord>:
}

void TWI_WriteWord(unsigned int src)
{
    unsigned char i = 0;
    SDA_116_OUT;
 220:	3c 9a       	sbi	0x07, 4	; 7
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	55 e0       	ldi	r21, 0x05	; 5
    for (i = 0; i < 16; i++)
    {
        if (src & 0x8000)
 226:	42 e0       	ldi	r20, 0x02	; 2
 228:	97 ff       	sbrs	r25, 7
 22a:	02 c0       	rjmp	.+4      	; 0x230 <TWI_WriteWord+0x10>
            SDA_116_H;
 22c:	44 9a       	sbi	0x08, 4	; 8
 22e:	01 c0       	rjmp	.+2      	; 0x232 <TWI_WriteWord+0x12>
        else
            SDA_116_L;
 230:	44 98       	cbi	0x08, 4	; 8
        SCL_116_H;
 232:	45 9a       	sbi	0x08, 5	; 8
 234:	25 2f       	mov	r18, r21
 236:	2a 95       	dec	r18
 238:	f1 f7       	brne	.-4      	; 0x236 <TWI_WriteWord+0x16>
        _delay_us(2);
        SCL_116_L;
 23a:	45 98       	cbi	0x08, 5	; 8
 23c:	24 2f       	mov	r18, r20
 23e:	2a 95       	dec	r18
 240:	f1 f7       	brne	.-4      	; 0x23e <TWI_WriteWord+0x1e>

void TWI_WriteWord(unsigned int src)
{
    unsigned char i = 0;
    SDA_116_OUT;
    for (i = 0; i < 16; i++)
 242:	3f 5f       	subi	r19, 0xFF	; 255
 244:	30 31       	cpi	r19, 0x10	; 16
 246:	19 f0       	breq	.+6      	; 0x24e <TWI_WriteWord+0x2e>
            SDA_116_L;
        SCL_116_H;
        _delay_us(2);
        SCL_116_L;
		_delay_us(1);
        src <<= 1;
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	ed cf       	rjmp	.-38     	; 0x228 <TWI_WriteWord+0x8>
 24e:	08 95       	ret

00000250 <TWI_ReadByte>:
}

unsigned char TWI_ReadByte(void)
{
    unsigned char i, tmp=0;
    SDA_116_IN;
 250:	3c 98       	cbi	0x07, 4	; 7
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	32 e0       	ldi	r19, 0x02	; 2
    for (i = 0; i < 8; i++)
    {
		if(SDA_116_HL)
 258:	34 9b       	sbis	0x06, 4	; 6
 25a:	03 c0       	rjmp	.+6      	; 0x262 <TWI_ReadByte+0x12>
            tmp = (tmp << 1) | 0x01;
 25c:	88 0f       	add	r24, r24
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	01 c0       	rjmp	.+2      	; 0x264 <TWI_ReadByte+0x14>
        else
            tmp = tmp << 1;
 262:	88 0f       	add	r24, r24
		SCL_116_H;
 264:	45 9a       	sbi	0x08, 5	; 8
 266:	93 2f       	mov	r25, r19
 268:	9a 95       	dec	r25
 26a:	f1 f7       	brne	.-4      	; 0x268 <TWI_ReadByte+0x18>
        _delay_us(1);
        SCL_116_L;
 26c:	45 98       	cbi	0x08, 5	; 8
 26e:	93 2f       	mov	r25, r19
 270:	9a 95       	dec	r25
 272:	f1 f7       	brne	.-4      	; 0x270 <TWI_ReadByte+0x20>

unsigned char TWI_ReadByte(void)
{
    unsigned char i, tmp=0;
    SDA_116_IN;
    for (i = 0; i < 8; i++)
 274:	2f 5f       	subi	r18, 0xFF	; 255
 276:	28 30       	cpi	r18, 0x08	; 8
 278:	79 f7       	brne	.-34     	; 0x258 <TWI_ReadByte+0x8>
        _delay_us(1);
        SCL_116_L;
		_delay_us(1);
    }
    return tmp;
}
 27a:	08 95       	ret

0000027c <TWI_ReadWord>:

unsigned int TWI_ReadWord(void)
{
    unsigned int regVal = 0;
    unsigned char i = 0;
    SDA_116_IN;
 27c:	3c 98       	cbi	0x07, 4	; 7
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	8a 95       	dec	r24
 282:	f1 f7       	brne	.-4      	; 0x280 <TWI_ReadWord+0x4>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	40 e0       	ldi	r20, 0x00	; 0
	_delay_us(1);
    for (i = 0; i < 16; i++)
    {
        if (SDA_116_HL)
 28a:	52 e0       	ldi	r21, 0x02	; 2
 28c:	c9 01       	movw	r24, r18
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	34 9b       	sbis	0x06, 4	; 6
 294:	03 c0       	rjmp	.+6      	; 0x29c <TWI_ReadWord+0x20>
            regVal = (regVal << 1) | 0x01;
 296:	9c 01       	movw	r18, r24
 298:	21 60       	ori	r18, 0x01	; 1
 29a:	01 c0       	rjmp	.+2      	; 0x29e <TWI_ReadWord+0x22>
        else
            regVal = regVal << 1;
 29c:	9c 01       	movw	r18, r24
		SCL_116_H;
 29e:	45 9a       	sbi	0x08, 5	; 8
 2a0:	85 2f       	mov	r24, r21
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <TWI_ReadWord+0x26>
        _delay_us(1);
        SCL_116_L;
 2a6:	45 98       	cbi	0x08, 5	; 8
 2a8:	85 2f       	mov	r24, r21
 2aa:	8a 95       	dec	r24
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <TWI_ReadWord+0x2e>
{
    unsigned int regVal = 0;
    unsigned char i = 0;
    SDA_116_IN;
	_delay_us(1);
    for (i = 0; i < 16; i++)
 2ae:	4f 5f       	subi	r20, 0xFF	; 255
 2b0:	40 31       	cpi	r20, 0x10	; 16
 2b2:	61 f7       	brne	.-40     	; 0x28c <TWI_ReadWord+0x10>
        _delay_us(1);
        SCL_116_L;
		_delay_us(1);
    }
    return regVal;
}
 2b4:	c9 01       	movw	r24, r18
 2b6:	08 95       	ret

000002b8 <TMP116Init>:

void TMP116Init(void)
{
 2b8:	1f 93       	push	r17
	TWI_WriteByte(TMP116_W_ADDR);	// IC slave address
 2ba:	81 e9       	ldi	r24, 0x91	; 145
 2bc:	9a df       	rcall	.-204    	; 0x1f2 <TWI_WriteByte>
 2be:	15 e0       	ldi	r17, 0x05	; 5
 2c0:	81 2f       	mov	r24, r17
 2c2:	8a 95       	dec	r24
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <TMP116Init+0xa>
	_delay_us(2);

	TWI_WriteByte(0x01);			// configure register address 0x01
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	94 df       	rcall	.-216    	; 0x1f2 <TWI_WriteByte>
 2ca:	81 2f       	mov	r24, r17
 2cc:	8a 95       	dec	r24
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <TMP116Init+0x14>
	_delay_us(2);

	TWI_WriteWord(0x250);
 2d0:	80 e5       	ldi	r24, 0x50	; 80
 2d2:	92 e0       	ldi	r25, 0x02	; 2
 2d4:	a5 df       	rcall	.-182    	; 0x220 <TWI_WriteWord>
 2d6:	1a 95       	dec	r17
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <TMP116Init+0x1e>
	_delay_us(2);

}
 2da:	1f 91       	pop	r17
 2dc:	08 95       	ret

000002de <ReadTemp>:

unsigned int ReadTemp(void)
{
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
	unsigned int value = 0;
	unsigned char temp = 0;
	SDA_116_OUT;
 2e4:	3c 9a       	sbi	0x07, 4	; 7
	SCL_116_H;
 2e6:	45 9a       	sbi	0x08, 5	; 8
	SDA_116_H;
 2e8:	44 9a       	sbi	0x08, 4	; 8
 2ea:	45 e0       	ldi	r20, 0x05	; 5
 2ec:	f4 2e       	mov	r15, r20
 2ee:	8f 2d       	mov	r24, r15
 2f0:	8a 95       	dec	r24
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <ReadTemp+0x12>
	_delay_us(2);
	SDA_116_L;
 2f4:	44 98       	cbi	0x08, 4	; 8
	
	TWI_WriteByte(TMP116_W_ADDR);	// IC slave address
 2f6:	81 e9       	ldi	r24, 0x91	; 145
 2f8:	7c df       	rcall	.-264    	; 0x1f2 <TWI_WriteByte>

	SCL_116_H;
 2fa:	45 9a       	sbi	0x08, 5	; 8
 2fc:	8f 2d       	mov	r24, r15
 2fe:	8a 95       	dec	r24
 300:	f1 f7       	brne	.-4      	; 0x2fe <ReadTemp+0x20>
	_delay_us(2);
	SDA_116_L;
 302:	44 98       	cbi	0x08, 4	; 8


	TWI_WriteByte(0x0);				// data register address 0x00
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	75 df       	rcall	.-278    	; 0x1f2 <TWI_WriteByte>

	SDA_116_OUT;
 308:	3c 9a       	sbi	0x07, 4	; 7
	SCL_116_H;
 30a:	45 9a       	sbi	0x08, 5	; 8
	SDA_116_H;
 30c:	44 9a       	sbi	0x08, 4	; 8
 30e:	8f 2d       	mov	r24, r15
 310:	8a 95       	dec	r24
 312:	f1 f7       	brne	.-4      	; 0x310 <__stack+0x11>
	_delay_us(2);
	SDA_116_L;
 314:	44 98       	cbi	0x08, 4	; 8

	TWI_WriteByte(TMP116_R_ADDR);	// IC slave address
 316:	80 e9       	ldi	r24, 0x90	; 144
 318:	6c df       	rcall	.-296    	; 0x1f2 <TWI_WriteByte>

	SCL_116_H;
 31a:	45 9a       	sbi	0x08, 5	; 8
 31c:	8f 2d       	mov	r24, r15
 31e:	8a 95       	dec	r24
 320:	f1 f7       	brne	.-4      	; 0x31e <__stack+0x1f>
	_delay_us(2);
	SDA_116_L;
 322:	44 98       	cbi	0x08, 4	; 8

	
	temp = TWI_ReadByte();
 324:	95 df       	rcall	.-214    	; 0x250 <TWI_ReadByte>
	value = temp;
	value <<= 8;
 326:	18 2f       	mov	r17, r24
 328:	00 e0       	ldi	r16, 0x00	; 0
	
	SCL_116_H;
 32a:	45 9a       	sbi	0x08, 5	; 8
 32c:	fa 94       	dec	r15
 32e:	f1 f7       	brne	.-4      	; 0x32c <__stack+0x2d>
	_delay_us(2);
	SDA_116_L;
 330:	44 98       	cbi	0x08, 4	; 8

	temp = TWI_ReadByte();
 332:	8e df       	rcall	.-228    	; 0x250 <TWI_ReadByte>
 334:	28 2f       	mov	r18, r24
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	20 2b       	or	r18, r16
 33a:	31 2b       	or	r19, r17
	value |= temp;
	return value;
}
 33c:	c9 01       	movw	r24, r18
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	ff 90       	pop	r15
 344:	08 95       	ret

00000346 <UartInit>:

void UartInit(void)
{
    UBRR0H = (F_CPU / BAUD / 16 - 1) / 256;
 346:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (F_CPU / BAUD / 16 - 1) % 256;
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
 350:	88 e9       	ldi	r24, 0x98	; 152
 352:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
 356:	86 e0       	ldi	r24, 0x06	; 6
 358:	80 93 c2 00 	sts	0x00C2, r24
}
 35c:	08 95       	ret

0000035e <SendStr>:
void SendStr(unsigned char* data,unsigned char len)
{
 35e:	58 2f       	mov	r21, r24
 360:	28 2f       	mov	r18, r24
 362:	39 2f       	mov	r19, r25
 364:	f9 01       	movw	r30, r18
 366:	07 c0       	rjmp	.+14     	; 0x376 <SendStr+0x18>
    unsigned char i;
    for(i=0; i<len; i++)
    {
        while(!(UCSR0A & (1 << UDRE0)));
 368:	80 91 c0 00 	lds	r24, 0x00C0
 36c:	85 ff       	sbrs	r24, 5
 36e:	fc cf       	rjmp	.-8      	; 0x368 <SendStr+0xa>
        UDR0 = *(data++);
 370:	81 91       	ld	r24, Z+
 372:	80 93 c6 00 	sts	0x00C6, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
}
void SendStr(unsigned char* data,unsigned char len)
{
    unsigned char i;
    for(i=0; i<len; i++)
 376:	8e 2f       	mov	r24, r30
 378:	85 1b       	sub	r24, r21
 37a:	86 17       	cp	r24, r22
 37c:	a8 f3       	brcs	.-22     	; 0x368 <SendStr+0xa>
    {
        while(!(UCSR0A & (1 << UDRE0)));
        UDR0 = *(data++);
    }
} 
 37e:	08 95       	ret

00000380 <main>:

int main(void)
{
 380:	ef 92       	push	r14
 382:	ff 92       	push	r15
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	df 93       	push	r29
 38a:	cf 93       	push	r28
 38c:	00 d0       	rcall	.+0      	; 0x38e <main+0xe>
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 	unsigned int i;
	unsigned char str[2] = {0};
 392:	1a 82       	std	Y+2, r1	; 0x02
 394:	19 82       	std	Y+1, r1	; 0x01
 	PortInit();
 396:	21 df       	rcall	.-446    	; 0x1da <PortInit>
	return value;
}

void UartInit(void)
{
    UBRR0H = (F_CPU / BAUD / 16 - 1) / 256;
 398:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (F_CPU / BAUD / 16 - 1) % 256;
 39c:	8c e0       	ldi	r24, 0x0C	; 12
 39e:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
 3a2:	88 e9       	ldi	r24, 0x98	; 152
 3a4:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
 3a8:	86 e0       	ldi	r24, 0x06	; 6
 3aa:	80 93 c2 00 	sts	0x00C2, r24
{
 	unsigned int i;
	unsigned char str[2] = {0};
 	PortInit();
	UartInit();
	TWIInt();
 3ae:	56 de       	rcall	.-852    	; 0x5c <TWIInt>
 3b0:	88 eb       	ldi	r24, 0xB8	; 184
 3b2:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3b4:	28 ec       	ldi	r18, 0xC8	; 200
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	f9 01       	movw	r30, r18
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0x3a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c0:	d9 f7       	brne	.-10     	; 0x3b8 <main+0x38>
	_delay_ms(300);
	SendStr("OK",2);
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	62 e0       	ldi	r22, 0x02	; 2
 3c8:	ca df       	rcall	.-108    	; 0x35e <SendStr>
	//	str[1] = I2C_Read(0x00)>>8;
		i = I2C_Read(0x00);
		str[0] = (i>>8);
		str[1] = i&0xFF;

		SendStr(str,2);
 3ca:	7e 01       	movw	r14, r28
 3cc:	08 94       	sec
 3ce:	e1 1c       	adc	r14, r1
 3d0:	f1 1c       	adc	r15, r1
 3d2:	08 ec       	ldi	r16, 0xC8	; 200
 3d4:	10 e0       	ldi	r17, 0x00	; 0
//	TMP116Init();
	while(1)
	{
	//	str[0] = I2C_Read(0x00)>>8;
	//	str[1] = I2C_Read(0x00)>>8;
		i = I2C_Read(0x00);
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	8b de       	rcall	.-746    	; 0xf2 <I2C_Read>
		str[0] = (i>>8);
 3dc:	99 83       	std	Y+1, r25	; 0x01
		str[1] = i&0xFF;
 3de:	8a 83       	std	Y+2, r24	; 0x02

		SendStr(str,2);
 3e0:	c7 01       	movw	r24, r14
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	bc df       	rcall	.-136    	; 0x35e <SendStr>
 3e6:	80 e2       	ldi	r24, 0x20	; 32
 3e8:	9e e4       	ldi	r25, 0x4E	; 78
 3ea:	f8 01       	movw	r30, r16
 3ec:	31 97       	sbiw	r30, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <main+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3f2:	d9 f7       	brne	.-10     	; 0x3ea <main+0x6a>
 3f4:	f0 cf       	rjmp	.-32     	; 0x3d6 <main+0x56>

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
