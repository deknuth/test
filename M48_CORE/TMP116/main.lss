
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000422  00000496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000422  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000e9  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008bd  00000000  00000000  000005c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000308  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000847  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000100  00000000  00000000  000019d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000183  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003ad  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001f8  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e2       	ldi	r30, 0x22	; 34
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a4 30       	cpi	r26, 0x04	; 4
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>
  56:	ab d1       	rcall	.+854    	; 0x3ae <main>
  58:	e2 c1       	rjmp	.+964    	; 0x41e <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <TWIInt>:
#define Twi() 		(TWCR=(1<<TWINT)|(1<<TWEN)) // 启动I2C
#define Write8Bit(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 		// 写数据到TWDR

void TWIInt(void)
{
    TWCR = 0x00;
  5c:	10 92 bc 00 	sts	0x00BC, r1
    TWBR = TWBR_SET;	// set speed
  60:	80 e2       	ldi	r24, 0x20	; 32
  62:	80 93 b8 00 	sts	0x00B8, r24
    TWSR = 0x00;
  66:	10 92 b9 00 	sts	0x00B9, r1
}
  6a:	08 95       	ret

0000006c <I2C_Write>:
I2C总线写一个字节
返回0:写成功
返回1:写失败
**********************************************/
unsigned char I2C_Write(unsigned char Wdata,unsigned char RegAddress)
{
  6c:	98 2f       	mov	r25, r24
   Start();
  6e:	84 ea       	ldi	r24, 0xA4	; 164
  70:	80 93 bc 00 	sts	0x00BC, r24
   Wait();
  74:	80 91 bc 00 	lds	r24, 0x00BC
  78:	87 ff       	sbrs	r24, 7
  7a:	fc cf       	rjmp	.-8      	; 0x74 <I2C_Write+0x8>
   if(TestAck()!=START)
  7c:	80 91 b9 00 	lds	r24, 0x00B9
  80:	88 7f       	andi	r24, 0xF8	; 248
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	a1 f5       	brne	.+104    	; 0xee <I2C_Write+0x82>
   return 1;     
  
   Write8Bit(WD_DEVICE_ADDR); //写I2C从器件地址和写方式
  86:	80 e9       	ldi	r24, 0x90	; 144
  88:	80 93 bb 00 	sts	0x00BB, r24
  8c:	84 e8       	ldi	r24, 0x84	; 132
  8e:	80 93 bc 00 	sts	0x00BC, r24
   Wait();
  92:	80 91 bc 00 	lds	r24, 0x00BC
  96:	87 ff       	sbrs	r24, 7
  98:	fc cf       	rjmp	.-8      	; 0x92 <I2C_Write+0x26>
   if(TestAck()!=MT_SLA_ACK)
  9a:	80 91 b9 00 	lds	r24, 0x00B9
  9e:	88 7f       	andi	r24, 0xF8	; 248
  a0:	88 31       	cpi	r24, 0x18	; 24
  a2:	29 f5       	brne	.+74     	; 0xee <I2C_Write+0x82>
   return 1;     
  
   Write8Bit(RegAddress);   //写器件相应寄存器地址
  a4:	60 93 bb 00 	sts	0x00BB, r22
  a8:	84 e8       	ldi	r24, 0x84	; 132
  aa:	80 93 bc 00 	sts	0x00BC, r24
   Wait();
  ae:	80 91 bc 00 	lds	r24, 0x00BC
  b2:	87 ff       	sbrs	r24, 7
  b4:	fc cf       	rjmp	.-8      	; 0xae <I2C_Write+0x42>
   if(TestAck()!=MT_DATA_ACK)
  b6:	80 91 b9 00 	lds	r24, 0x00B9
  ba:	88 7f       	andi	r24, 0xF8	; 248
  bc:	88 32       	cpi	r24, 0x28	; 40
  be:	b9 f4       	brne	.+46     	; 0xee <I2C_Write+0x82>
   return 1;        
  
   Write8Bit(Wdata);    // 写数据到器件相应寄存器
  c0:	90 93 bb 00 	sts	0x00BB, r25
  c4:	84 e8       	ldi	r24, 0x84	; 132
  c6:	80 93 bc 00 	sts	0x00BC, r24
   Wait();
  ca:	80 91 bc 00 	lds	r24, 0x00BC
  ce:	87 ff       	sbrs	r24, 7
  d0:	fc cf       	rjmp	.-8      	; 0xca <I2C_Write+0x5e>
   if(TestAck() != MT_DATA_ACK)
  d2:	80 91 b9 00 	lds	r24, 0x00B9
  d6:	88 7f       	andi	r24, 0xF8	; 248
  d8:	88 32       	cpi	r24, 0x28	; 40
  da:	49 f4       	brne	.+18     	; 0xee <I2C_Write+0x82>
   return 1;      
  
   Stop();        //I2C停止
  dc:	84 e9       	ldi	r24, 0x94	; 148
  de:	80 93 bc 00 	sts	0x00BC, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e2:	80 e2       	ldi	r24, 0x20	; 32
  e4:	9e e4       	ldi	r25, 0x4E	; 78
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <I2C_Write+0x7a>
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret
   _delay_ms(10);     //延时
   return 0;
  ee:	81 e0       	ldi	r24, 0x01	; 1
} 
  f0:	08 95       	ret

000000f2 <I2C_Read>:

unsigned int I2C_Read(unsigned RegAddress)
{
  f2:	98 2f       	mov	r25, r24
	unsigned int temp;
	
	Start();
  f4:	84 ea       	ldi	r24, 0xA4	; 164
  f6:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
  fa:	80 91 bc 00 	lds	r24, 0x00BC
  fe:	87 ff       	sbrs	r24, 7
 100:	fc cf       	rjmp	.-8      	; 0xfa <I2C_Read+0x8>
	if(TestAck()!=START) 
 102:	80 91 b9 00 	lds	r24, 0x00B9
 106:	88 7f       	andi	r24, 0xF8	; 248
 108:	88 30       	cpi	r24, 0x08	; 8
 10a:	09 f0       	breq	.+2      	; 0x10e <I2C_Read+0x1c>
 10c:	64 c0       	rjmp	.+200    	; 0x1d6 <I2C_Read+0xe4>
		return 1;
	
	Write8Bit(WD_DEVICE_ADDR); 	// 写I2C从器件地址和写方式
 10e:	80 e9       	ldi	r24, 0x90	; 144
 110:	80 93 bb 00 	sts	0x00BB, r24
 114:	84 e8       	ldi	r24, 0x84	; 132
 116:	80 93 bc 00 	sts	0x00BC, r24
	Wait(); 
 11a:	80 91 bc 00 	lds	r24, 0x00BC
 11e:	87 ff       	sbrs	r24, 7
 120:	fc cf       	rjmp	.-8      	; 0x11a <I2C_Read+0x28>
	if(TestAck()!=MT_SLA_ACK)
 122:	80 91 b9 00 	lds	r24, 0x00B9
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	88 31       	cpi	r24, 0x18	; 24
 12a:	09 f0       	breq	.+2      	; 0x12e <I2C_Read+0x3c>
 12c:	54 c0       	rjmp	.+168    	; 0x1d6 <I2C_Read+0xe4>
		return 1;
	
	Write8Bit(RegAddress); 	// 写器件相应寄存器地址
 12e:	90 93 bb 00 	sts	0x00BB, r25
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 138:	80 91 bc 00 	lds	r24, 0x00BC
 13c:	87 ff       	sbrs	r24, 7
 13e:	fc cf       	rjmp	.-8      	; 0x138 <I2C_Read+0x46>
	if (TestAck()!=MT_DATA_ACK) 
 140:	80 91 b9 00 	lds	r24, 0x00B9
 144:	88 7f       	andi	r24, 0xF8	; 248
 146:	88 32       	cpi	r24, 0x28	; 40
 148:	09 f0       	breq	.+2      	; 0x14c <I2C_Read+0x5a>
 14a:	45 c0       	rjmp	.+138    	; 0x1d6 <I2C_Read+0xe4>
 14c:	8c ed       	ldi	r24, 0xDC	; 220
 14e:	95 e0       	ldi	r25, 0x05	; 5
 150:	28 ec       	ldi	r18, 0xC8	; 200
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	f9 01       	movw	r30, r18
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <I2C_Read+0x64>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15c:	d9 f7       	brne	.-10     	; 0x154 <I2C_Read+0x62>
		return 1;
	
	_delay_ms(150);
	
	Start(); 		// I2C重新启动
 15e:	84 ea       	ldi	r24, 0xA4	; 164
 160:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 164:	80 91 bc 00 	lds	r24, 0x00BC
 168:	87 ff       	sbrs	r24, 7
 16a:	fc cf       	rjmp	.-8      	; 0x164 <I2C_Read+0x72>
	if(TestAck()!=RE_START) 
 16c:	80 91 b9 00 	lds	r24, 0x00B9
 170:	88 7f       	andi	r24, 0xF8	; 248
 172:	80 31       	cpi	r24, 0x10	; 16
 174:	81 f5       	brne	.+96     	; 0x1d6 <I2C_Read+0xe4>
		return 1;
	Write8Bit(RD_DEVICE_ADDR); // 写I2C从器件地址和读方式
 176:	81 e9       	ldi	r24, 0x91	; 145
 178:	80 93 bb 00 	sts	0x00BB, r24
 17c:	84 e8       	ldi	r24, 0x84	; 132
 17e:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 182:	80 91 bc 00 	lds	r24, 0x00BC
 186:	87 ff       	sbrs	r24, 7
 188:	fc cf       	rjmp	.-8      	; 0x182 <I2C_Read+0x90>
	if(TestAck()!=MR_SLA_ACK) 
 18a:	80 91 b9 00 	lds	r24, 0x00B9
 18e:	88 7f       	andi	r24, 0xF8	; 248
 190:	80 34       	cpi	r24, 0x40	; 64
 192:	09 f5       	brne	.+66     	; 0x1d6 <I2C_Read+0xe4>
		return 1;

	Twi(); 			// 启动主I2C读方式
 194:	84 e8       	ldi	r24, 0x84	; 132
 196:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 19a:	80 91 bc 00 	lds	r24, 0x00BC
 19e:	87 ff       	sbrs	r24, 7
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <I2C_Read+0xa8>
	if(TestAck() != MR_DATA_NOACK) 
 1a2:	80 91 b9 00 	lds	r24, 0x00B9
 1a6:	88 7f       	andi	r24, 0xF8	; 248
 1a8:	88 35       	cpi	r24, 0x58	; 88
 1aa:	a9 f4       	brne	.+42     	; 0x1d6 <I2C_Read+0xe4>
		return 1; 
	temp = TWDR;		// 读取I2C接收数据
 1ac:	90 91 bb 00 	lds	r25, 0x00BB
	temp <<= 8;
	
	Twi(); 			// 启动主I2C读方式
 1b0:	84 e8       	ldi	r24, 0x84	; 132
 1b2:	80 93 bc 00 	sts	0x00BC, r24
	Wait();
 1b6:	80 91 bc 00 	lds	r24, 0x00BC
 1ba:	87 ff       	sbrs	r24, 7
 1bc:	fc cf       	rjmp	.-8      	; 0x1b6 <I2C_Read+0xc4>
	temp |= TWDR;		// 读取I2C接收数据
 1be:	80 91 bb 00 	lds	r24, 0x00BB
	Twi(); 			// 启动主I2C读方式
	Wait();
	if(TestAck() != MR_DATA_NOACK) 
		return 1; 
	temp = TWDR;		// 读取I2C接收数据
	temp <<= 8;
 1c2:	39 2f       	mov	r19, r25
 1c4:	20 e0       	ldi	r18, 0x00	; 0
	
	Twi(); 			// 启动主I2C读方式
	Wait();
	temp |= TWDR;		// 读取I2C接收数据
 1c6:	48 2f       	mov	r20, r24
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	42 2b       	or	r20, r18
 1cc:	53 2b       	or	r21, r19
	Stop();
 1ce:	84 e9       	ldi	r24, 0x94	; 148
 1d0:	80 93 bc 00 	sts	0x00BC, r24
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <I2C_Read+0xe8>
	
	return temp;
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	50 e0       	ldi	r21, 0x00	; 0
}
 1da:	ca 01       	movw	r24, r20
 1dc:	08 95       	ret

000001de <PortInit>:
#define TMP116_R_ADDR	0x91


void PortInit(void)
{
    DDRB = 0B00000000;
 1de:	14 b8       	out	0x04, r1	; 4
    PORTB= 0B00000000;
 1e0:	15 b8       	out	0x05, r1	; 5
    PINB = 0x00;
 1e2:	13 b8       	out	0x03, r1	; 3

    DDRD = 0B01111100;		// PD5->RES	PD6->D/C PD7->BUSY PD4->SDI PD3->CS PD2->CLK
 1e4:	8c e7       	ldi	r24, 0x7C	; 124
 1e6:	8a b9       	out	0x0a, r24	; 10
    PORTD= 0B00000000;
 1e8:	1b b8       	out	0x0b, r1	; 11
    PIND = 0x00;
 1ea:	19 b8       	out	0x09, r1	; 9

    DDRC = 0B00111111;
 1ec:	8f e3       	ldi	r24, 0x3F	; 63
 1ee:	87 b9       	out	0x07, r24	; 7
    PORTC= 0B00110000;
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	88 b9       	out	0x08, r24	; 8
    PINC = 0x00;
 1f4:	16 b8       	out	0x06, r1	; 6
}
 1f6:	08 95       	ret

000001f8 <TWI_ReadByte>:

unsigned char TWI_ReadByte(void)
{
    unsigned char i, tmp=0;
    SDA_116_IN;
 1f8:	3c 98       	cbi	0x07, 4	; 7
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	80 e0       	ldi	r24, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1fe:	35 e0       	ldi	r19, 0x05	; 5
    for (i = 0; i < 8; i++)
    {
		SCL_116_L;
 200:	45 98       	cbi	0x08, 5	; 8
		asm("nop");
 202:	00 00       	nop
		asm("nop");
 204:	00 00       	nop
		if(SDA_116_HL)
 206:	34 9b       	sbis	0x06, 4	; 6
 208:	03 c0       	rjmp	.+6      	; 0x210 <TWI_ReadByte+0x18>
            tmp = (tmp << 1) | 0x01;
 20a:	88 0f       	add	r24, r24
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	01 c0       	rjmp	.+2      	; 0x212 <TWI_ReadByte+0x1a>
        else
            tmp = tmp << 1;
 210:	88 0f       	add	r24, r24
 212:	93 2f       	mov	r25, r19
 214:	9a 95       	dec	r25
 216:	f1 f7       	brne	.-4      	; 0x214 <TWI_ReadByte+0x1c>
		_delay_us(2);
        SCL_116_H;
 218:	45 9a       	sbi	0x08, 5	; 8
 21a:	93 2f       	mov	r25, r19
 21c:	9a 95       	dec	r25
 21e:	f1 f7       	brne	.-4      	; 0x21c <TWI_ReadByte+0x24>

unsigned char TWI_ReadByte(void)
{
    unsigned char i, tmp=0;
    SDA_116_IN;
    for (i = 0; i < 8; i++)
 220:	2f 5f       	subi	r18, 0xFF	; 255
 222:	28 30       	cpi	r18, 0x08	; 8
 224:	69 f7       	brne	.-38     	; 0x200 <TWI_ReadByte+0x8>
            tmp = tmp << 1;
		_delay_us(2);
        SCL_116_H;
		_delay_us(2);
    }
	SCL_116_L;
 226:	45 98       	cbi	0x08, 5	; 8
 228:	95 e0       	ldi	r25, 0x05	; 5
 22a:	9a 95       	dec	r25
 22c:	f1 f7       	brne	.-4      	; 0x22a <TWI_ReadByte+0x32>
	_delay_us(2);		// 应答
	SCL_116_H;
 22e:	45 9a       	sbi	0x08, 5	; 8
    return tmp;
}
 230:	08 95       	ret

00000232 <TWI_WriteByte>:

void TWI_WriteByte(unsigned char src)
{
    unsigned char i;
    SDA_116_OUT;
 232:	3c 9a       	sbi	0x07, 4	; 7
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	45 e0       	ldi	r20, 0x05	; 5
    for (i = 0; i < 8; i++)
    {
        if (src & 0x80)
 238:	32 e0       	ldi	r19, 0x02	; 2
 23a:	87 ff       	sbrs	r24, 7
 23c:	02 c0       	rjmp	.+4      	; 0x242 <TWI_WriteByte+0x10>
            SDA_116_H;
 23e:	44 9a       	sbi	0x08, 4	; 8
 240:	01 c0       	rjmp	.+2      	; 0x244 <TWI_WriteByte+0x12>
        else
            SDA_116_L;
 242:	44 98       	cbi	0x08, 4	; 8
        SCL_116_H;
 244:	45 9a       	sbi	0x08, 5	; 8
 246:	94 2f       	mov	r25, r20
 248:	9a 95       	dec	r25
 24a:	f1 f7       	brne	.-4      	; 0x248 <TWI_WriteByte+0x16>
        _delay_us(2);
		SCL_116_L;
 24c:	45 98       	cbi	0x08, 5	; 8
 24e:	93 2f       	mov	r25, r19
 250:	9a 95       	dec	r25
 252:	f1 f7       	brne	.-4      	; 0x250 <TWI_WriteByte+0x1e>

void TWI_WriteByte(unsigned char src)
{
    unsigned char i;
    SDA_116_OUT;
    for (i = 0; i < 8; i++)
 254:	2f 5f       	subi	r18, 0xFF	; 255
 256:	28 30       	cpi	r18, 0x08	; 8
 258:	11 f0       	breq	.+4      	; 0x25e <TWI_WriteByte+0x2c>
            SDA_116_L;
        SCL_116_H;
        _delay_us(2);
		SCL_116_L;
		_delay_us(1);
        src <<= 1;
 25a:	88 0f       	add	r24, r24
 25c:	ee cf       	rjmp	.-36     	; 0x23a <TWI_WriteByte+0x8>
 25e:	08 95       	ret

00000260 <TWI_WriteWord>:
}

void TWI_WriteWord(unsigned int src)
{
    unsigned char i = 0;
    SDA_116_OUT;
 260:	3c 9a       	sbi	0x07, 4	; 7
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	55 e0       	ldi	r21, 0x05	; 5
    for (i = 0; i < 16; i++)
    {
        if (src & 0x8000)
 266:	42 e0       	ldi	r20, 0x02	; 2
 268:	97 ff       	sbrs	r25, 7
 26a:	02 c0       	rjmp	.+4      	; 0x270 <TWI_WriteWord+0x10>
            SDA_116_H;
 26c:	44 9a       	sbi	0x08, 4	; 8
 26e:	01 c0       	rjmp	.+2      	; 0x272 <TWI_WriteWord+0x12>
        else
            SDA_116_L;
 270:	44 98       	cbi	0x08, 4	; 8
        SCL_116_L;
 272:	45 98       	cbi	0x08, 5	; 8
 274:	25 2f       	mov	r18, r21
 276:	2a 95       	dec	r18
 278:	f1 f7       	brne	.-4      	; 0x276 <TWI_WriteWord+0x16>
        _delay_us(2);
        SCL_116_H;
 27a:	45 9a       	sbi	0x08, 5	; 8
 27c:	24 2f       	mov	r18, r20
 27e:	2a 95       	dec	r18
 280:	f1 f7       	brne	.-4      	; 0x27e <TWI_WriteWord+0x1e>

void TWI_WriteWord(unsigned int src)
{
    unsigned char i = 0;
    SDA_116_OUT;
    for (i = 0; i < 16; i++)
 282:	3f 5f       	subi	r19, 0xFF	; 255
 284:	30 31       	cpi	r19, 0x10	; 16
 286:	19 f0       	breq	.+6      	; 0x28e <TWI_WriteWord+0x2e>
            SDA_116_L;
        SCL_116_L;
        _delay_us(2);
        SCL_116_H;
		_delay_us(1);
        src <<= 1;
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	ed cf       	rjmp	.-38     	; 0x268 <TWI_WriteWord+0x8>
    }
	SCL_116_L;			// 应答
 28e:	45 98       	cbi	0x08, 5	; 8
 290:	85 e0       	ldi	r24, 0x05	; 5
 292:	8a 95       	dec	r24
 294:	f1 f7       	brne	.-4      	; 0x292 <TWI_WriteWord+0x32>
	_delay_us(2);
	SCL_116_H;
 296:	45 9a       	sbi	0x08, 5	; 8
}
 298:	08 95       	ret

0000029a <TWI_ReadWord>:

unsigned int TWI_ReadWord(void)
{
    unsigned int regVal = 0;
    unsigned char i = 0;
    SDA_116_IN;
 29a:	3c 98       	cbi	0x07, 4	; 7
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	55 e0       	ldi	r21, 0x05	; 5
    for (i = 0; i < 16; i++)
    {
		SCL_116_L;
 2a4:	45 98       	cbi	0x08, 5	; 8
		asm("nop");
 2a6:	00 00       	nop
		asm("nop");
 2a8:	00 00       	nop
 2aa:	c9 01       	movw	r24, r18
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
		if (SDA_116_HL)
 2b0:	34 9b       	sbis	0x06, 4	; 6
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <TWI_ReadWord+0x20>
            regVal = (regVal << 1) | 0x01;
 2b4:	9c 01       	movw	r18, r24
 2b6:	21 60       	ori	r18, 0x01	; 1
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <TWI_ReadWord+0x22>
        else
            regVal = regVal << 1;
 2ba:	9c 01       	movw	r18, r24
 2bc:	85 2f       	mov	r24, r21
 2be:	8a 95       	dec	r24
 2c0:	f1 f7       	brne	.-4      	; 0x2be <TWI_ReadWord+0x24>
        _delay_us(2);
        SCL_116_H;
 2c2:	45 9a       	sbi	0x08, 5	; 8
 2c4:	85 2f       	mov	r24, r21
 2c6:	8a 95       	dec	r24
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <TWI_ReadWord+0x2c>
unsigned int TWI_ReadWord(void)
{
    unsigned int regVal = 0;
    unsigned char i = 0;
    SDA_116_IN;
    for (i = 0; i < 16; i++)
 2ca:	4f 5f       	subi	r20, 0xFF	; 255
 2cc:	40 31       	cpi	r20, 0x10	; 16
 2ce:	51 f7       	brne	.-44     	; 0x2a4 <TWI_ReadWord+0xa>
            regVal = regVal << 1;
        _delay_us(2);
        SCL_116_H;
		_delay_us(2);
    }
	SCL_116_L;
 2d0:	45 98       	cbi	0x08, 5	; 8
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	8a 95       	dec	r24
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <TWI_ReadWord+0x3a>
	_delay_us(2);		// 应答
	SCL_116_H;
 2d8:	45 9a       	sbi	0x08, 5	; 8
    return regVal;
}
 2da:	c9 01       	movw	r24, r18
 2dc:	08 95       	ret

000002de <TWI_Write>:
#define TWI_STATR	{ SDA_116_OUT; SDA_116_L; _delay_us(1);}
#define ACK { SCL_116_H; _delay_us(2); SCL_116_L; SDA_116_H;}

void TWI_Write(unsigned char RegAddress,unsigned int Wdata)
{
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	f8 2e       	mov	r15, r24
 2e6:	8b 01       	movw	r16, r22
	TWI_STATR;
 2e8:	3c 9a       	sbi	0x07, 4	; 7
 2ea:	44 98       	cbi	0x08, 4	; 8
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	8a 95       	dec	r24
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <TWI_Write+0x10>
	TWI_WriteByte(TMP116_W_ADDR);	// IC slave address
 2f2:	80 e9       	ldi	r24, 0x90	; 144
 2f4:	9e df       	rcall	.-196    	; 0x232 <TWI_WriteByte>
	TWI_WriteByte(RegAddress);			// configure register address 0x01
 2f6:	8f 2d       	mov	r24, r15
 2f8:	9c df       	rcall	.-200    	; 0x232 <TWI_WriteByte>
	TWI_WriteWord(Wdata);
 2fa:	c8 01       	movw	r24, r16
 2fc:	b1 df       	rcall	.-158    	; 0x260 <TWI_WriteWord>
	ACK;
 2fe:	45 9a       	sbi	0x08, 5	; 8
 300:	85 e0       	ldi	r24, 0x05	; 5
 302:	8a 95       	dec	r24
 304:	f1 f7       	brne	.-4      	; 0x302 <__stack+0x3>
 306:	45 98       	cbi	0x08, 5	; 8
 308:	44 9a       	sbi	0x08, 4	; 8
}
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	ff 90       	pop	r15
 310:	08 95       	ret

00000312 <TMP116Init>:


void TMP116Init(void)
{
	TWI_Write(0x01,0x250);
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	60 e5       	ldi	r22, 0x50	; 80
 316:	72 e0       	ldi	r23, 0x02	; 2
 318:	e2 df       	rcall	.-60     	; 0x2de <TWI_Write>
}
 31a:	08 95       	ret

0000031c <ReadTemp>:


unsigned int ReadTemp(void)
{
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
	unsigned int value = 0;
		
	TWI_STATR;
 320:	3c 9a       	sbi	0x07, 4	; 7
 322:	44 98       	cbi	0x08, 4	; 8
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	8a 95       	dec	r24
 328:	f1 f7       	brne	.-4      	; 0x326 <ReadTemp+0xa>
	TWI_WriteByte(TMP116_W_ADDR);	// IC slave address
 32a:	80 e9       	ldi	r24, 0x90	; 144
 32c:	82 df       	rcall	.-252    	; 0x232 <TWI_WriteByte>
	ACK;
 32e:	45 9a       	sbi	0x08, 5	; 8
 330:	15 e0       	ldi	r17, 0x05	; 5
 332:	81 2f       	mov	r24, r17
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <ReadTemp+0x18>
 338:	45 98       	cbi	0x08, 5	; 8
 33a:	44 9a       	sbi	0x08, 4	; 8
	TWI_WriteByte(0x00);			// data register address 0x00
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	79 df       	rcall	.-270    	; 0x232 <TWI_WriteByte>
	ACK;
 340:	45 9a       	sbi	0x08, 5	; 8
 342:	81 2f       	mov	r24, r17
 344:	8a 95       	dec	r24
 346:	f1 f7       	brne	.-4      	; 0x344 <ReadTemp+0x28>
 348:	45 98       	cbi	0x08, 5	; 8
 34a:	44 9a       	sbi	0x08, 4	; 8
//	_delay_ms(150);
	
	TWI_WriteByte(TMP116_R_ADDR);	// IC slave address
 34c:	81 e9       	ldi	r24, 0x91	; 145
 34e:	71 df       	rcall	.-286    	; 0x232 <TWI_WriteByte>
	ACK;
 350:	45 9a       	sbi	0x08, 5	; 8
 352:	1a 95       	dec	r17
 354:	f1 f7       	brne	.-4      	; 0x352 <ReadTemp+0x36>
 356:	45 98       	cbi	0x08, 5	; 8
 358:	44 9a       	sbi	0x08, 4	; 8
//	_delay_ms(150);

	value = TWI_ReadByte();
 35a:	4e df       	rcall	.-356    	; 0x1f8 <TWI_ReadByte>
	SDA_116_L;
 35c:	44 98       	cbi	0x08, 4	; 8
	value <<= 8;
 35e:	18 2f       	mov	r17, r24
 360:	00 e0       	ldi	r16, 0x00	; 0
	value |= TWI_ReadByte();
 362:	4a df       	rcall	.-364    	; 0x1f8 <TWI_ReadByte>
 364:	28 2f       	mov	r18, r24
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	20 2b       	or	r18, r16
 36a:	31 2b       	or	r19, r17
	
	return value;
}
 36c:	c9 01       	movw	r24, r18
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <UartInit>:

void UartInit(void)
{
    UBRR0H = (F_CPU / BAUD / 16 - 1) / 256;
 374:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (F_CPU / BAUD / 16 - 1) % 256;
 378:	8c e0       	ldi	r24, 0x0C	; 12
 37a:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
 37e:	88 e9       	ldi	r24, 0x98	; 152
 380:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
 384:	86 e0       	ldi	r24, 0x06	; 6
 386:	80 93 c2 00 	sts	0x00C2, r24
}
 38a:	08 95       	ret

0000038c <SendStr>:
void SendStr(unsigned char* data,unsigned char len)
{
 38c:	58 2f       	mov	r21, r24
 38e:	28 2f       	mov	r18, r24
 390:	39 2f       	mov	r19, r25
 392:	f9 01       	movw	r30, r18
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <SendStr+0x18>
    unsigned char i;
    for(i=0; i<len; i++)
    {
        while(!(UCSR0A & (1 << UDRE0)));
 396:	80 91 c0 00 	lds	r24, 0x00C0
 39a:	85 ff       	sbrs	r24, 5
 39c:	fc cf       	rjmp	.-8      	; 0x396 <SendStr+0xa>
        UDR0 = *(data++);
 39e:	81 91       	ld	r24, Z+
 3a0:	80 93 c6 00 	sts	0x00C6, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
}
void SendStr(unsigned char* data,unsigned char len)
{
    unsigned char i;
    for(i=0; i<len; i++)
 3a4:	8e 2f       	mov	r24, r30
 3a6:	85 1b       	sub	r24, r21
 3a8:	86 17       	cp	r24, r22
 3aa:	a8 f3       	brcs	.-22     	; 0x396 <SendStr+0xa>
    {
        while(!(UCSR0A & (1 << UDRE0)));
        UDR0 = *(data++);
    }
} 
 3ac:	08 95       	ret

000003ae <main>:

int main(void)
{
 3ae:	ef 92       	push	r14
 3b0:	ff 92       	push	r15
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	df 93       	push	r29
 3b8:	cf 93       	push	r28
 3ba:	00 d0       	rcall	.+0      	; 0x3bc <main+0xe>
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 	unsigned int i;
	unsigned char str[2] = {0};
 3c0:	1a 82       	std	Y+2, r1	; 0x02
 3c2:	19 82       	std	Y+1, r1	; 0x01
 	PortInit();
 3c4:	0c df       	rcall	.-488    	; 0x1de <PortInit>
	return value;
}

void UartInit(void)
{
    UBRR0H = (F_CPU / BAUD / 16 - 1) / 256;
 3c6:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (F_CPU / BAUD / 16 - 1) % 256;
 3ca:	8c e0       	ldi	r24, 0x0C	; 12
 3cc:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
 3d0:	88 e9       	ldi	r24, 0x98	; 152
 3d2:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
 3d6:	86 e0       	ldi	r24, 0x06	; 6
 3d8:	80 93 c2 00 	sts	0x00C2, r24
 3dc:	88 eb       	ldi	r24, 0xB8	; 184
 3de:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3e0:	28 ec       	ldi	r18, 0xC8	; 200
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	f9 01       	movw	r30, r18
 3e6:	31 97       	sbiw	r30, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <main+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ec:	d9 f7       	brne	.-10     	; 0x3e4 <main+0x36>
 	unsigned int i;
	unsigned char str[2] = {0};
 	PortInit();
	UartInit();
	_delay_ms(300);
	SendStr("OK",2);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	62 e0       	ldi	r22, 0x02	; 2
 3f4:	cb df       	rcall	.-106    	; 0x38c <SendStr>
//		I2C_Write(0x01,TMP116_W_ADDR);
//		i = I2C_Read(0x00);
		str[0] = (i>>8);
		str[1] = i&0xFF;

		SendStr(str,2);
 3f6:	7e 01       	movw	r14, r28
 3f8:	08 94       	sec
 3fa:	e1 1c       	adc	r14, r1
 3fc:	f1 1c       	adc	r15, r1
 3fe:	08 ec       	ldi	r16, 0xC8	; 200
 400:	10 e0       	ldi	r17, 0x00	; 0
// TMP116Init();
	while(1)
	{
	//	str[0] = I2C_Read(0x00);
	//	str[1] = I2C_Read(0x00);
		i = ReadTemp();
 402:	8c df       	rcall	.-232    	; 0x31c <ReadTemp>
		
//		I2C_Write(0x01,TMP116_W_ADDR);
//		i = I2C_Read(0x00);
		str[0] = (i>>8);
 404:	99 83       	std	Y+1, r25	; 0x01
		str[1] = i&0xFF;
 406:	8a 83       	std	Y+2, r24	; 0x02

		SendStr(str,2);
 408:	c7 01       	movw	r24, r14
 40a:	62 e0       	ldi	r22, 0x02	; 2
 40c:	bf df       	rcall	.-130    	; 0x38c <SendStr>
 40e:	80 eb       	ldi	r24, 0xB0	; 176
 410:	96 e3       	ldi	r25, 0x36	; 54
 412:	f8 01       	movw	r30, r16
 414:	31 97       	sbiw	r30, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 418:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 41a:	d9 f7       	brne	.-10     	; 0x412 <main+0x64>
 41c:	f2 cf       	rjmp	.-28     	; 0x402 <main+0x54>

0000041e <_exit>:
 41e:	f8 94       	cli

00000420 <__stop_program>:
 420:	ff cf       	rjmp	.-2      	; 0x420 <__stop_program>
